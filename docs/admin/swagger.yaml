definitions:
  enum.EOrderStatus:
    enum:
    - pending
    - paid
    - preparing
    - shipped
    - arrived
    - completed
    - cancelled
    type: string
    x-enum-varnames:
    - OrderStatusPending
    - OrderStatusPaid
    - OrderStatusPreparing
    - OrderStatusShipped
    - OrderStatusArrived
    - OrderStatusCompleted
    - OrderStatusCancelled
  enum.EProductType:
    enum:
    - single
    - bundle
    - admin
    - customer
    type: string
    x-enum-varnames:
    - ProductTypeSingle
    - ProductTypeGroup
    - Admin
    - Customer
  request.Brand:
    properties:
      name:
        type: string
    type: object
  request.CompatibilityRule:
    properties:
      condition:
        type: string
      errorMessage:
        type: string
      isActive:
        type: boolean
      sourceComponentTypeCode:
        type: string
      sourceKey:
        type: string
      targetComponentTypeCode:
        type: string
      targetKey:
        type: string
      valueType:
        type: string
    type: object
  request.ComponentSpec:
    properties:
      id:
        type: string
      specKey:
        type: string
      specValue:
        type: string
    type: object
  request.ComponentType:
    properties:
      code:
        type: string
      description:
        type: string
      name:
        type: string
    type: object
  request.LoginUserPayload:
    properties:
      email:
        maxLength: 500
        minLength: 5
        type: string
      password:
        maxLength: 500
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  request.Menu:
    properties:
      name:
        type: string
      parentId:
        type: integer
      path:
        type: string
    type: object
  request.MenuItem:
    properties:
      productCategoryId:
        type: integer
    type: object
  request.ProductCategory:
    properties:
      name:
        type: string
    type: object
  request.ProductGroupItemPayload:
    properties:
      id:
        type: string
      productId:
        type: string
      productSkuId:
        type: string
      qty:
        type: integer
    type: object
  request.ProductPayload:
    properties:
      brandId:
        type: integer
      componentTypeId:
        type: integer
      description:
        type: string
      imageIds:
        items:
          type: string
        type: array
      isActive:
        type: boolean
      isShowOnlyInMarketPlace:
        type: boolean
      name:
        type: string
      productCategoryId:
        type: integer
      productSkuVariants:
        items:
          $ref: '#/definitions/request.ProductSkuVariantPayload'
        type: array
      productSkus:
        items:
          $ref: '#/definitions/request.ProductSkuPayload'
        type: array
      productSpec:
        type: string
      productType:
        $ref: '#/definitions/enum.EProductType'
      productVariantOptionValues:
        items:
          $ref: '#/definitions/request.ProductVariantOptionValuePayload'
        type: array
      productVariantOptions:
        items:
          $ref: '#/definitions/request.ProductVariantOptionPayload'
        type: array
      sku:
        type: string
      tags:
        type: string
      videoUrl:
        type: string
    type: object
  request.ProductSkuPayload:
    properties:
      componentSpecs:
        items:
          $ref: '#/definitions/request.ComponentSpec'
        type: array
      id:
        type: string
      isActive:
        type: boolean
      name:
        type: string
      price:
        type: number
      productGroupItems:
        items:
          $ref: '#/definitions/request.ProductGroupItemPayload'
        type: array
      sku:
        type: string
      stock:
        type: integer
      stockAlert:
        type: integer
    type: object
  request.ProductSkuVariantPayload:
    properties:
      id:
        type: string
      productSkuId:
        type: string
      productVariantOptionId:
        type: string
      productVariantOptionValueId:
        type: string
    type: object
  request.ProductVariantOptionPayload:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  request.ProductVariantOptionValuePayload:
    properties:
      id:
        type: string
      name:
        type: string
      productVariantOptionId:
        type: string
    type: object
  request.RegisterUserPayload:
    properties:
      email:
        maxLength: 128
        minLength: 5
        type: string
      fullName:
        maxLength: 128
        minLength: 1
        type: string
      password:
        maxLength: 64
        minLength: 1
        type: string
      userName:
        maxLength: 16
        minLength: 5
        type: string
    required:
    - email
    - fullName
    - password
    - userName
    type: object
  request.UpdateOrderShippingByAdmin:
    properties:
      deliveredAt:
        type: string
      estimatedDelivery:
        type: string
      shippedAt:
        type: string
      shippingMethod:
        type: string
      trackingNumber:
        type: string
    type: object
  request.UpdateOrderStatusByAdmin:
    properties:
      newStatus:
        $ref: '#/definitions/enum.EOrderStatus'
    type: object
  request.VariantOptionPayload:
    properties:
      name:
        type: string
    type: object
  response.AuditTrail:
    properties:
      id:
        type: integer
      userName:
        type: string
    type: object
  response.Brand:
    properties:
      createdAt:
        type: string
      createdById:
        $ref: '#/definitions/response.AuditTrail'
      id:
        type: integer
      modifiedAt:
        type: string
      modifiedById:
        $ref: '#/definitions/response.AuditTrail'
      name:
        type: string
    type: object
  response.CompatibilityRule:
    properties:
      condition:
        type: string
      createdAt:
        type: string
      createdById:
        $ref: '#/definitions/response.AuditTrail'
      errorMessage:
        type: string
      id:
        type: integer
      isActive:
        type: boolean
      modifiedAt:
        type: string
      modifiedById:
        $ref: '#/definitions/response.AuditTrail'
      sourceComponentTypeCode:
        type: string
      sourceKey:
        type: string
      targetComponentTypeCode:
        type: string
      targetKey:
        type: string
      valueType:
        type: string
    type: object
  response.ComponentSpec:
    properties:
      id:
        type: string
      productSkuId:
        type: string
      specKey:
        type: string
      specValue:
        type: string
    type: object
  response.ComponentType:
    properties:
      code:
        type: string
      createdAt:
        type: string
      createdById:
        $ref: '#/definitions/response.AuditTrail'
      description:
        type: string
      id:
        type: integer
      modifiedAt:
        type: string
      modifiedById:
        $ref: '#/definitions/response.AuditTrail'
      name:
        type: string
    type: object
  response.CustomerInfo:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      phoneNumber:
        type: string
    type: object
  response.EnumResponse:
    properties:
      code:
        type: string
      name:
        type: string
    type: object
  response.Menu:
    properties:
      childs:
        items:
          $ref: '#/definitions/response.Menu'
        type: array
      createdAt:
        type: string
      createdById:
        $ref: '#/definitions/response.AuditTrail'
      id:
        type: integer
      menuItems:
        items:
          $ref: '#/definitions/response.MenuItem'
        type: array
      modifiedAt:
        type: string
      modifiedById:
        $ref: '#/definitions/response.AuditTrail'
      name:
        type: string
      parentId:
        type: integer
      path:
        type: string
    type: object
  response.MenuItem:
    properties:
      id:
        type: integer
      name:
        type: string
      productCategoryId:
        type: integer
    type: object
  response.Order:
    properties:
      code:
        type: string
      createdByCustomerAt:
        type: string
      customerId:
        type: integer
      customerInfo:
        $ref: '#/definitions/response.CustomerInfo'
      id:
        type: string
      isPaid:
        type: boolean
      modifiedByCustomerAt:
        type: string
      notes:
        type: string
      orderDate:
        type: string
      orderItems:
        items:
          $ref: '#/definitions/response.OrderItem'
        type: array
      paidAt:
        type: string
      paymentUrl:
        type: string
      shippingInfo:
        $ref: '#/definitions/response.ShippingInfo'
      status:
        $ref: '#/definitions/response.EnumResponse'
      totalPaid:
        type: number
    type: object
  response.OrderItem:
    properties:
      id:
        type: string
      orderId:
        type: string
      price:
        type: number
      product:
        $ref: '#/definitions/response.OrderItemProduct'
      productId:
        type: string
      productSkuId:
        type: string
      quantity:
        type: integer
    type: object
  response.OrderItemProduct:
    properties:
      description:
        type: string
      id:
        type: string
      imageIds:
        items:
          type: string
        type: array
      isActive:
        type: boolean
      name:
        type: string
      productSku:
        $ref: '#/definitions/response.OrderItemProductSku'
      sku:
        type: string
    type: object
  response.OrderItemProductSku:
    properties:
      id:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      stock:
        type: integer
    type: object
  response.ProductCategory:
    properties:
      createdAt:
        type: string
      createdById:
        $ref: '#/definitions/response.AuditTrail'
      id:
        type: integer
      modifiedAt:
        type: string
      modifiedById:
        $ref: '#/definitions/response.AuditTrail'
      name:
        type: string
    type: object
  response.ProductGroupItemResponse:
    properties:
      id:
        type: string
      product:
        $ref: '#/definitions/response.ProductResponse'
      productId:
        type: string
      productSkuId:
        type: string
      qty:
        type: integer
    type: object
  response.ProductResponse:
    properties:
      brand:
        $ref: '#/definitions/response.Brand'
      componentType:
        $ref: '#/definitions/response.ComponentType'
      createdAt:
        type: string
      createdById:
        $ref: '#/definitions/response.AuditTrail'
      description:
        type: string
      id:
        type: string
      imageIds:
        items:
          type: string
        type: array
      isActive:
        type: boolean
      isShowOnlyInMarketPlace:
        type: boolean
      modifiedAt:
        type: string
      modifiedById:
        $ref: '#/definitions/response.AuditTrail'
      name:
        type: string
      productCategory:
        $ref: '#/definitions/response.ProductCategory'
      productGroupItems:
        items:
          $ref: '#/definitions/response.ProductGroupItemResponse'
        type: array
      productSkuVariants:
        items:
          $ref: '#/definitions/response.ProductSkuVariant'
        type: array
      productSkus:
        items:
          $ref: '#/definitions/response.ProductSku'
        type: array
      productSpec:
        type: string
      productType:
        $ref: '#/definitions/response.EnumResponse'
      productVariantOptionValues:
        items:
          $ref: '#/definitions/response.ProductVariantOptionValue'
        type: array
      productVariantOptions:
        items:
          $ref: '#/definitions/response.ProductVariantOption'
        type: array
      sku:
        type: string
      tags:
        type: string
      videoUrl:
        type: string
    type: object
  response.ProductSku:
    properties:
      componentSpecs:
        items:
          $ref: '#/definitions/response.ComponentSpec'
        type: array
      id:
        type: string
      isActive:
        type: boolean
      name:
        type: string
      price:
        type: number
      productGroupItems:
        items:
          $ref: '#/definitions/response.ProductGroupItemResponse'
        type: array
      productId:
        type: string
      sequence:
        type: integer
      sku:
        type: string
      stock:
        type: integer
      stockAlert:
        type: integer
    type: object
  response.ProductSkuVariant:
    properties:
      id:
        type: string
      productSkuId:
        type: string
      productVariantOptionId:
        type: string
      productVariantOptionValueId:
        type: string
    type: object
  response.ProductVariantOption:
    properties:
      allowDelete:
        type: boolean
      id:
        type: string
      name:
        type: string
      productId:
        type: string
      sequence:
        type: integer
    type: object
  response.ProductVariantOptionValue:
    properties:
      allowDelete:
        type: boolean
      id:
        type: string
      name:
        type: string
      productVariantOptionId:
        type: string
      sequence:
        type: integer
    type: object
  response.ShippingInfo:
    properties:
      address:
        type: string
      city:
        type: string
      createdAt:
        type: string
      deliveredAt:
        type: string
      estimatedDelivery:
        type: string
      id:
        type: string
      notes:
        type: string
      orderId:
        type: string
      postalCode:
        type: string
      province:
        type: string
      recipientName:
        type: string
      shippedAt:
        type: string
      shippingMethod:
        type: string
      trackingNumber:
        type: string
      updatedAt:
        type: string
    type: object
  response.User:
    properties:
      email:
        type: string
      fullName:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  response.VariantOption:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  response.WebResponse:
    properties:
      code:
        type: integer
      content: {}
      message:
        items:
          type: string
        type: array
      status:
        type: string
    type: object
info:
  contact: {}
  description: Swagger documentation for admin
  title: Admin API
  version: "1.0"
paths:
  /api/admin/brands:
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Brand'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Search brand
      tags:
      - Brand
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.Brand'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Create brand
      tags:
      - Brand
  /api/admin/brands/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete brand
      tags:
      - Brand
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Brand'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Get brand by id
      tags:
      - Brand
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.Brand'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Update brand
      tags:
      - Brand
  /api/admin/compatibility-rules:
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CompatibilityRule'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Search compatibility rules
      tags:
      - Compatibility Rules
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CompatibilityRule'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Create compatibility rules
      tags:
      - Compatibility Rules
  /api/admin/compatibility-rules/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete compatibility rules
      tags:
      - Compatibility Rules
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CompatibilityRule'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Get compatibility rules by id
      tags:
      - Compatibility Rules
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CompatibilityRule'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Update compatibility rules
      tags:
      - Compatibility Rules
  /api/admin/component-types:
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ComponentType'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Search component type
      tags:
      - Component Type
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.ComponentType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Create Component ype
      tags:
      - Component Type
  /api/admin/component-types/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete component type
      tags:
      - Component Type
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ComponentType'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Get component type by id
      tags:
      - Component Type
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.ComponentType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Update component type
      tags:
      - Component Type
  /api/admin/files:
    get:
      parameters:
      - description: File UUID without extension
        in: query
        name: id
        required: true
        type: string
      produces:
      - image/jpeg
      responses:
        "200":
          description: Photo content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Photo by ID
      tags:
      - File
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: Multiple photo files (max 1MB each, .jpg/.jpeg/.png)
        in: formData
        name: photos
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
        "413":
          description: File too large
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload Multiple Photos
      tags:
      - File
  /api/admin/menus:
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: query
        name: query
        type: string
      - description: ' '
        in: query
        name: parentId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Menu'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Search menu
      tags:
      - Menu
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.Menu'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Create menu
      tags:
      - Menu
  /api/admin/menus/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete menu
      tags:
      - Menu
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.Menu'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Update menu
      tags:
      - Menu
  /api/admin/menus/{menuId}:
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: menuId
        required: true
        type: integer
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.MenuItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Create menu item
      tags:
      - Menu
  /api/admin/menus/delete-item/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete menu item
      tags:
      - Menu
  /api/admin/orders:
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: query
        name: query
        type: string
      - description: ' '
        in: query
        name: status
        type: string
      - description: ' '
        in: query
        name: fromDate
        type: string
      - description: ' '
        in: query
        name: page
        required: true
        type: integer
      - description: ' '
        in: query
        name: pageSize
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Search order
      tags:
      - Order
  /api/admin/orders/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Get order by id
      tags:
      - Order
  /api/admin/orders/{id}/update-shipping-info:
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: string
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateOrderShippingByAdmin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Update shipping info order
      tags:
      - Order
  /api/admin/orders/{id}/update-status:
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: string
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateOrderStatusByAdmin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Order'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Update status order
      tags:
      - Order
  /api/admin/product-categories:
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ProductCategory'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Search category
      tags:
      - Product Category
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.ProductCategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Create category
      tags:
      - Product Category
  /api/admin/product-categories/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete category
      tags:
      - Product Category
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ProductCategory'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Get category by id
      tags:
      - Product Category
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: integer
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.ProductCategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Update category
      tags:
      - Product Category
  /api/admin/products:
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: query
        name: query
        type: string
      - description: ' '
        in: query
        name: productTypes
        type: string
      - collectionFormat: csv
        description: Array of IDs
        in: query
        items:
          type: integer
        name: productCategoryId
        type: array
      - description: ' '
        in: query
        name: isActive
        type: boolean
      - description: ' '
        in: query
        name: isShowOnlyInMarketplace
        type: boolean
      - description: ' '
        in: query
        name: page
        type: integer
      - description: ' '
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.ProductResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Search products
      tags:
      - Product
  /api/admin/products/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete product
      tags:
      - Product
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ProductResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Get product by id
      tags:
      - Product
    post:
      consumes:
      - application/json
      parameters:
      - description: Id (UUID format)
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.ProductPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Create Product
      tags:
      - Product
    put:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: path
        name: id
        required: true
        type: string
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.ProductPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Update Product
      tags:
      - Product
  /api/admin/products/browse-product-sku:
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: query
        name: query
        type: string
      - description: ' '
        in: query
        name: productTypes
        type: string
      - description: ' '
        in: query
        name: productCategoryId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.ProductResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Browse products sku
      tags:
      - Product
  /api/admin/variant-options:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.VariantOption'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Variant Options
      tags:
      - Product Variant Option
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.VariantOptionPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Create Variant Option
      tags:
      - Product Variant Option
  /api/auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.LoginUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.WebResponse'
      summary: Login
      tags:
      - Auth
  /api/user/getByEmail:
    get:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user by email
      tags:
      - User
  /api/user/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.WebResponse'
      security:
      - ApiKeyAuth: []
      summary: Get my profile
      tags:
      - User
  /api/user/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: ' '
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.WebResponse'
      summary: Register user
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
